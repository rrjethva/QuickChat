{"version":3,"sources":["components/Sidebar.js","containers/Sidebar.js","components/Message.js","components/MessagesList.js","containers/MessagesList.js","components/AddMessage.js","actions/index.js","containers/AddMessage.js","constants/ActionTypes.js","App.js","registerServiceWorker.js","reducers/messages.js","reducers/users.js","reducers/index.js","sagas/index.js","sockets/index.js","utils/name.js","index.js"],"names":["Sidebar","users","id","className","map","user","key","name","connect","state","SideBarComponent","Message","message","author","MessagesList","messages","MessagesListComponent","AddMessage","props","input","onKeyPress","e","dispatch","value","type","ref","node","nextMessageId","addMessage","AddMessageComponent","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","action","concat","chat","combineReducers","handleNewMessage","params","takeEvery","username","socket","send","JSON","stringify","setupSocket","WebSocket","onopen","onmessage","event","data","parse","types","chance","Chance","first","sagaMiddleware","createSagaMiddleWare","store","createStore","reducers","applyMiddleware","run","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8bce0e6e.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Sidebar = ({ users }) => (\r\n    <aside id=\"sidebar\" className=\"sidebar\">\r\n        <ul>\r\n            {users.map(user => (\r\n                <li key={user.id}>{user.name}</li>\r\n            ))}\r\n        </ul>\r\n    </aside>\r\n);\r\n\r\nSidebar.propTypes = {\r\n    users: PropTypes.arrayOf(PropTypes.shape({\r\n        id: PropTypes.number.isRequired,\r\n        name: PropTypes.string.isRequired\r\n    }).isRequired).isRequired\r\n};\r\n\r\nexport default Sidebar;","import { connect } from 'react-redux';\r\nimport SideBarComponent from '../components/Sidebar';\r\n\r\nexport const Sidebar = connect(state => ({\r\n    users: state.users\r\n}), {})(SideBarComponent);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Message = ({ message, author }) => (\r\n    <p>\r\n        <i>{author}</i>: {message}\r\n    </p>\r\n);\r\n\r\nMessage.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n    author: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Message;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Message from './Message';\r\n\r\nconst MessagesList = ({ messages }) => (\r\n    <section id=\"messages-list\">\r\n        <ul>\r\n            {messages.map(message => (\r\n                <Message key={message.id} {...message}\r\n                />\r\n            ))}\r\n        </ul>\r\n    </section>\r\n);\r\n\r\nMessagesList.propTypes = {\r\n    messages: PropTypes.arrayOf(PropTypes.shape({\r\n        id: PropTypes.number.isRequired,\r\n        message: PropTypes.string.isRequired,\r\n        author: PropTypes.string.isRequired\r\n    }).isRequired).isRequired\r\n};\r\n\r\nexport default MessagesList;","import { connect } from 'react-redux';\r\nimport MessagesListComponent from '../components/MessagesList';\r\n\r\nexport const MessagesList = connect(state => ({\r\n    messages: state.messages\r\n}), {})(MessagesListComponent);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddMessage = (props) => {\r\n    let input;\r\n    return (\r\n        <section id=\"new-message\">\r\n            <input onKeyPress={(e) => {\r\n                if (e.key === 'Enter') {\r\n                    props.dispatch(input.value, 'Me');\r\n                    input.value = '';\r\n                }\r\n            }}\r\n                type=\"text\"\r\n                ref={(node) => {\r\n                    input = node;\r\n                }}\r\n            />\r\n        </section>\r\n    )\r\n};\r\n\r\nAddMessage.propTypes = {\r\n    dispatch: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AddMessage;","import * as types from '../constants/ActionTypes';\r\n\r\nlet nextMessageId = 0;\r\n// const nextUserId = 0;\r\n\r\nexport const addMessage = (message, author) => ({\r\n    type: types.ADD_MESSAGE,\r\n    id: nextMessageId++,\r\n    message,\r\n    author\r\n});\r\n\r\nexport const messageReceived = (message, author) => ({\r\n    type: types.MESSAGE_RECEIVED,\r\n    id: nextMessageId++,\r\n    message,\r\n    author\r\n});\r\n\r\nexport const populateUsersList = users => ({\r\n    types: types.USERS_LIST,\r\n    users\r\n});","import { connect } from 'react-redux';\r\nimport AddMessageComponent from '../components/AddMessage';\r\nimport { addMessage } from '../actions';\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    dispatch: (message, author) => {\r\n        dispatch(addMessage(message, author))\r\n    }\r\n});\r\n\r\nexport const AddMessage = connect(() => ({}), mapDispatchToProps)(AddMessageComponent);","export const ADD_MESSAGE = 'ADD_MESSAGE';\r\nexport const MESSAGE_RECEIVED = 'MESSAGE_RECEIVED';\r\nexport const ADD_USER = 'ADD_USER';\r\nexport const USERS_LIST = 'USERS_LIST';","import React from 'react';\nimport './App.css';\nimport { Sidebar } from './containers/Sidebar';\nimport { MessagesList } from './containers/MessagesList';\nimport { AddMessage } from './containers/AddMessage';\n\nconst App = () => (\n  <div id=\"container\">\n    <Sidebar />\n    <section id=\"main\">\n      <MessagesList />\n      <AddMessage />\n    </section>\n  </div>\n);\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","const messages = (state = [], action) => {\r\n    switch (action.type) {\r\n        case 'ADD_MESSAGE':\r\n        case 'MESSAGE_RECEIVED':\r\n            return state.concat([\r\n                {\r\n                    message: action.message,\r\n                    author: action.author,\r\n                    id: action.id\r\n                }\r\n            ]);\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\nexport default messages;","import * as types from '../constants/ActionTypes';\r\n\r\nconst users = (state = [], action) => {\r\n    switch (action.type) {\r\n        case types.USERS_LIST:\r\n            return action.users\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default users;","import { combineReducers } from 'redux';\r\nimport messages from './messages';\r\nimport users from './users';\r\n\r\nconst chat = combineReducers({\r\n    messages,\r\n    users\r\n})\r\n\r\nexport default chat;","import { takeEvery } from 'redux-saga/effects';\r\nimport * as types from '../constants/ActionTypes';\r\n\r\nconst handleNewMessage = function* handleNewMessage(params) {\r\n    yield takeEvery(types.ADD_MESSAGE, (action) => {\r\n        action.author = params.username\r\n        params.socket.send(JSON.stringify(action))\r\n    })\r\n};\r\n\r\nexport default handleNewMessage;","import * as types from '../constants/ActionTypes';\r\nimport { messageReceived, populateUsersList } from '../actions';\r\n\r\nconst setupSocket = (dispatch, username) => {\r\n    const socket = new WebSocket('ws://localhost:8989');\r\n\r\n    socket.onopen = () => {\r\n        socket.send(JSON.stringify({\r\n            type: types.ADD_USER,\r\n            name: username\r\n        }));\r\n    };\r\n    socket.onmessage = (event) => {\r\n        const data = JSON.parse(event.data);\r\n        switch (data.type) {\r\n            case types.ADD_MESSAGE:\r\n                dispatch(messageReceived(data.message, data.author))\r\n                break;\r\n            case types.USERS_LIST:\r\n                dispatch(populateUsersList(data.users))\r\n                break;\r\n            default:\r\n                break;\r\n        };\r\n    };\r\n    return socket;\r\n};\r\n\r\nexport default setupSocket;","import Chance from 'chance';\r\n\r\nconst chance = new Chance();\r\n\r\nexport default chance.first();","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleWare from 'redux-saga';\n\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport reducers from './reducers';\nimport handleNewMessage from './sagas';\nimport setupSocket from './sockets';\nimport username from './utils/name';\n\nconst sagaMiddleware = createSagaMiddleWare();\n\nconst store = createStore(\n  reducers,\n  applyMiddleware(sagaMiddleware)\n);\n\nconst socket = setupSocket(store.dispatch, username);\n\nsagaMiddleware.run(handleNewMessage, { socket, username });\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nregisterServiceWorker();\n"],"sourceRoot":""}